[{"D:\\recipes_Task\\recipes-app\\src\\App.js":"1","D:\\recipes_Task\\recipes-app\\src\\reportWebVitals.js":"2","D:\\recipes_Task\\recipes-app\\src\\index.js":"3","D:\\recipes_Task\\recipes-app\\src\\services\\RecipeService.js":"4","D:\\recipes_Task\\recipes-app\\src\\firebase.js":"5","D:\\recipes_Task\\recipes-app\\src\\components\\RecipesList.js":"6","D:\\recipes_Task\\recipes-app\\src\\components\\Recipe.js":"7","D:\\recipes_Task\\recipes-app\\src\\components\\AddRecipe.js":"8"},{"size":1105,"mtime":1606747995742,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1606684595484,"results":"11","hashOfConfig":"10"},{"size":544,"mtime":1606740907120,"results":"12","hashOfConfig":"10"},{"size":460,"mtime":1606741817430,"results":"13","hashOfConfig":"10"},{"size":534,"mtime":1606744195853,"results":"14","hashOfConfig":"10"},{"size":2483,"mtime":1606834028927,"results":"15","hashOfConfig":"10"},{"size":3317,"mtime":1606836398354,"results":"16","hashOfConfig":"10"},{"size":3125,"mtime":1606834384517,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20"},"1g2pb9z",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\recipes_Task\\recipes-app\\src\\App.js",["36"],"import logo from './logo.svg';\nimport './App.css';\nimport { Switch, Route, Link } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport AddRecipe from \"./components/AddRecipe\";\nimport RecipesList from \"./components/RecipesList\";\n\n\nfunction App() {\n  return (\n    <div>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <a href=\"/recipes\" className=\"navbar-brand\">\n          AIM\n        </a>\n        <div className=\"navbar-nav mr-auto\">\n          <li className=\"nav-item\">\n            <Link to={\"/recipes\"} className=\"nav-link\">\n              Recipes\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link to={\"/add\"} className=\"nav-link\">\n              Add\n            </Link>\n          </li>\n        </div>\n      </nav>\n\n      <div className=\"container mt-3\">\n        <h2>Remember Your Recipes</h2>\n        <Switch>\n          <Route exact path={[\"/\", \"/recipes\"]} component={RecipesList} />\n          <Route exact path=\"/add\" component={AddRecipe} />\n        </Switch>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","D:\\recipes_Task\\recipes-app\\src\\reportWebVitals.js",[],"D:\\recipes_Task\\recipes-app\\src\\index.js",[],"D:\\recipes_Task\\recipes-app\\src\\services\\RecipeService.js",["37"],"D:\\recipes_Task\\recipes-app\\src\\firebase.js",[],"D:\\recipes_Task\\recipes-app\\src\\components\\RecipesList.js",[],"D:\\recipes_Task\\recipes-app\\src\\components\\Recipe.js",["38"],"import React, { useState } from \"react\";\r\nimport RecipeDataService from \"../services/RecipeService\";\r\n\r\nconst Recipe = (props) => {\r\n  const initialRecipeState = {\r\n    key: null,\r\n    title: \"\",\r\n    ingredient: \"\",\r\n    recipe: \"\",\r\n    image:props.recipe.image\r\n  };\r\n  const [currentRecipe, setCurrentRecipe] = useState(initialRecipeState);\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const { recipe } = props;\r\n  if (currentRecipe.key !== recipe.key) {\r\n    setCurrentRecipe(recipe);\r\n    setMessage(\"\");\r\n  }\r\n\r\n  const handleInputChange = (event) => {\r\n    const { name, value } = event.target;\r\n    setCurrentRecipe({ ...currentRecipe, [name]: value });\r\n    console.log(currentRecipe)\r\n  };\r\n\r\n  const updateRecipe = () => {\r\n    const data = {\r\n      title: currentRecipe.title,\r\n      ingredient: currentRecipe.ingredient,\r\n      recipe: currentRecipe.recipe,\r\n      image: currentRecipe.image\r\n    };\r\n\r\n    RecipeDataService.update(currentRecipe.key, data)\r\n      .then(() => {\r\n        setMessage(\"The recipe was updated successfully!\");\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  const deleteRecipe = () => {\r\n    RecipeDataService.remove(currentRecipe.key)\r\n      .then(() => {\r\n        props.refreshList();\r\n      })\r\n      .catch((e) => {\r\n        console.log(e);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {currentRecipe ? (\r\n        <div className=\"edit-form\">\r\n          <h4>Recipe</h4>\r\n          <form>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"title\">Title</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"title\"\r\n                name=\"title\"\r\n                value={currentRecipe.title}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"ingredient\">Ingredient</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"ingredient\"\r\n                name=\"ingredient\"\r\n                value={currentRecipe.ingredient}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <label htmlFor=\"recipe\">Recipe</label>\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                id=\"recipe\"\r\n                name=\"recipe\"\r\n                value={currentRecipe.recipe}\r\n                onChange={handleInputChange}\r\n              />\r\n            </div>\r\n            <div className=\"form-group\">\r\n              <img src={currentRecipe.image}  alt=\"image of dish\" width=\"100%\" />\r\n            </div>\r\n          </form>\r\n          <button className=\"badge badge-danger mr-2\" onClick={deleteRecipe}>\r\n            Delete\r\n          </button>\r\n\r\n          <button\r\n            type=\"submit\"\r\n            className=\"badge badge-success\"\r\n            onClick={updateRecipe}\r\n          >\r\n            Update\r\n          </button>\r\n          <p>{message}</p>\r\n        </div>\r\n      ) : (\r\n        <div>\r\n          <br />\r\n          <p>Please click on a Recipe for details...</p>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;","D:\\recipes_Task\\recipes-app\\src\\components\\AddRecipe.js",["39"],{"ruleId":"40","severity":1,"message":"41","line":1,"column":8,"nodeType":"42","messageId":"43","endLine":1,"endColumn":12},{"ruleId":"44","severity":1,"message":"45","line":25,"column":1,"nodeType":"46","endLine":31,"endColumn":3},{"ruleId":"47","severity":1,"message":"48","line":96,"column":15,"nodeType":"49","endLine":96,"endColumn":82},{"ruleId":"50","severity":1,"message":"51","line":16,"column":14,"nodeType":"52","messageId":"53","endLine":16,"endColumn":16},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]